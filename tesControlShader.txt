#version 460 core

layout(location=0) uniform mat4 MVP;
layout(location=1) uniform mat4 M;
layout (location=5) uniform vec3 camPos;


layout (vertices = 3) out;

in vec4 fcolor[];
in vec4 fpos[];
in vec4 fnorm[];
flat in int fTextType[];


patch out vec4 tescontrol_color;
out vec4 tescontrol_pos[];
out vec4 tescontrol_norm[];
patch out int tescontrol_TextType;


const int MIN_TES = 1;
const int MAX_TES = 2;
const float MIN_DIST = 0.0;
const float MAX_DIST = 4;



void main(){

	//TODO gestionar valores segun la distancia de la camara

	gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
	
	tescontrol_color = fcolor[gl_InvocationID];
	tescontrol_pos[gl_InvocationID] = fpos[gl_InvocationID];
	tescontrol_norm[gl_InvocationID] = fnorm[gl_InvocationID];
	tescontrol_TextType = fTextType[gl_InvocationID];

	
if (gl_InvocationID == 0)
    {
		
		float test = distance(camPos, fpos[gl_InvocationID].xyz);
			
        if(test > 0 && test < 4){

		gl_TessLevelOuter[0] = 4; 
        gl_TessLevelOuter[1] = 4; 
        gl_TessLevelOuter[2] = 4; 
        
        gl_TessLevelInner[0] = 4;
		}	
		else{
		gl_TessLevelOuter[0] = 2; 
        gl_TessLevelOuter[1] = 2; 
        gl_TessLevelOuter[2] = 2; 
        
        gl_TessLevelInner[0] = 2;
		}

    }


    
}


